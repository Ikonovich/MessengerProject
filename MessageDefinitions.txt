// The first three characters of a transmission MUST BE as follows:
//
// [Index 0] - Multiple Message Indicator - If T (True), the ServerThread stores the message in a transmission buffer.
// When an F (False) transmission is received following a T transmission or multiple T transmissions, the
// buffer contents are sent to be parsed and the buffer is cleared.
// [Index 1-2] - Opcode - Determines how the remainder of the message is parsed by being assigned to a bitmask.
//
//
//As such, all information in a server message __must__ be in the bitmask appropriate order with the
//appropriate sizes, and a field __must__ not be present if not required by the given Opcode.
//
// Padding of input strings is done using asterisks (*) at this time, using the Parser.Pack function.
//
//The bitmask order is as follows:
//
// 000001 / 1: UserID - 32 characters - Present for all messages except login and registration.
// 000010 / 2: UserName - 32 characters - Present for login and registration. Used to hold a Friend User ID
for add friend, remove friend, and chat invite. Used to hold search name for user search.
// 000100 / 4: Password - 128 characters - Present only for login and registration.
// 001000 / 8: SessionID - 32 characters - Required for all non-login and non-registration interactions. Very weakly verifies connection
// integrity.
// 010000 / 16: ChatID - 32 characters - Identifies a single chat between one or multiple people.
// 100000 / 32: MessageID - 32 characters - Identifies a single message.
// XX / NULL: Message - No character limit. Often contains an extra parameter for running an opcode, or a message
// displaying in a pop up. Places where the Message segment contains non-notification data are added below.


// The final component of a received transmission, the Message, is whatever remains after the item determined by the bit mask are parsed out.
//
// The core server opcodes with their bitmasks are:
//
// IR (Initial Registration):  000110  /  6 
// LR (Login Request):  000110  /   6
// LO (Logout Request):  001001  /   9
// PF (Pull Friends):  001001  /   9
// RF (Remove Friend):  001011  / 11
// AR (Approve Request): 001001 / 9 -- For this code, the "Message" component stores the RequestID to approve
// DR (Delete Request): 001001 / 9 -- For this code, the "Message" component stores the RequestID to delete
// SR (Send Request): 001011 / 11 -- For this code, the "Message" component contains a JSON request dictionary containing 
// keys "RequestType" and "Parameter".
// PR (Pull Requests): 001001 / 9
// US (User Search): 001011 / 11
// PC (Pull User-Chat Pairs) / 001001 / 9
// PM (Pull Messages From Chat):  011001    / 25
// CC (Create Chat): 001011 / 11  -- For this code, the "Message" component stores the desired chat name
// CO (Command) 011001 / 9 -- For this code, the "Message" component stores a dictionary containing "Command" keys and an associated string as
documented in Commands.txt. Depending on the specific command, the dictionary will be required to contain other components, such as the userID of the 
user for the command to act on.

// SM (Send Message):  011001   /   27
// DM (Delete Message):  101001   /   41 -- The server determines if the user has permissions to 
delete that particular message (If the message is theres or they have delete permissions in the chat).
// HB (Heartbeat): 000000 / 0

// The core client opcodes with their bitmasks are:
//
// RU (Registration unsuccessful):  00010 / 2
// RS (Registration successful):  00010  / 2
// LU (Login unsuccessful):	 00010 / 2
// LS (Login successful):  01011 / 3
// FP (Friend Push): 01001 / 9
// RP (Request(s) Push): 01001 / 9
// UR (User search Results) : 01001 / 9
// CP (User-Chat Pairs Push): 01001 / 9
// MP (Message Push for one chat): 11011 / 27  
// CN (Chat Notification): 11001 / 25
// AM (Administrative Message): 01001 / 9
// HB (Heartbeat): 00000 / 0



---- Packet format ----
All messages sent from both client and server contain the following information: 

Description:					Index in Packet String: 	Purpose:

[Multiple Message Indicator - 1 char]		[0]				Indicates whether to combine the following transmission with this one.
[Requested connection type - 2 chars]  		[1-2]				Used to verify chain of custody of the packet.


From there, message types differ on their contents and must be parsed appropriately.

----------------------------
Client messages:


Description:					Index in Packet String:		Purpose:
------
Initial Registration[IR] and Login Request[LR]:

[User Name - 32 chars]       			[2-34]				Identifies the source(sent from client) or destination(sent from server) of the packet.
[Password - Up to 128 chars]			[35-End]			Weakly ensures that the message is coming from the correct client or the genuine server

------
Pull Friends[PM]:

[User ID - 32 chars]       			[2-34]				Identifies the source(sent from client) or destination(sent from server) of the packet.
[Session ID - 32 chars]				[35-66]				Weakly ensures that the message is coming from the correct client or the genuine server


------
Add Friend[AF]:

[User ID - 32 chars]       			[2-34]				Identifies the source(sent from client) or destination(sent from server) of the packet.
[Session ID - 32 chars]				[35-66]				Weakly ensures that the message is coming from the correct client or the genuine server
[Friend UserID - 32 chars]			[67-98]			Contains the userID of the friend being added



------
Send Message[SM]:

[Session ID - 32 chars]				[35-66]				Weakly ensures that the message is coming from the correct client or the genuine server
[Chat ID - 32 chars]				[67-98]			Contains the Chat ID the message is being sent in
[Message - No strict limit] 			[99-End]			Contains the message being sent

------
Pull Chat[PC]:

[User ID - 32 chars]       			[2-34]				Identifies the source(sent from client) or destination(sent from server) of the packet.
[Session ID - 32 chars]				[35-66]				Weakly ensures that the message is coming from the correct client or the genuine server
[Chat ID - 32 chars]				[67-98]			Contains the Chat ID that messages are being requested for

---------------------------------------------------------------------------------------
Server Messages:

Description:					Index in Packet String:		Purpose:

-------
Registration Successful[RS]: 
[Message - 256 char max]			[35-End]			A message indicating that registration has been successful.


-------
Login Successful[LS]: 

[Session ID - 32 chars]				[35-66]				Provides the client with a unique session ID allowing verification of further communications
[Message - 256 char max]			[67-End]			A message indicating that login has been successful.

-------
Registration Unsuccessful[RU]: 

[Message - 256 char max]			[35-End]			A message indicating that registration has been unsuccessful and a brief explanation.


-------
Login Unsuccessful[RU]: 

[Message - 256 char max]			[35-End]			A message indicating that login has been unsuccessful and a brief explanation.


-------
Friend Push[FP]:

[Session ID - 32 chars]				[35-66]				Weakly ensures that the message is coming from the correct client or the genuine server
[JSON string - no strict limit]			[67-End]			A json string containing a list of the user's friend names



-------
Message Push[MP]:

[Session ID - 32 chars]				[35-66]				Weakly ensures that the message is coming from the correct client or the genuine server
[Chat ID - 32 chars]				[67-98]			Contains the Chat ID that messages are being sent for
[JSON string - no strict limit]			[99-End]			A json string containing a list of the user's friend names

------
Verify Add[VA]:

[Session ID - 32 chars]				[35-66]				Weakly ensures that the message is coming from the correct client or the genuine server
[Friend Username - 32 chars]			[67-98]				Contains the username of the friend that was added


------
Verify Send[VS]:

[Session ID - 32 chars]				[35-66]				Weakly ensures that the message is coming from the correct client or the genuine server



----------
Administrative Message[AM]:

[Message - 256 char max]			[35-End]			An administrative message, usually indicating that a non-login/registration error has occurred.

